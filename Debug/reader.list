
reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  080034f4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080034f4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b472  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a12  00000000  00000000  0002b50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017621  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000925c  00000000  00000000  00045ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000898dd  00000000  00000000  0004ef05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d87e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  000d8860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033fc 	.word	0x080033fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033fc 	.word	0x080033fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b087      	sub	sp, #28
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a37      	ldr	r2, [pc, #220]	; (8000248 <HAL_UART_RxCpltCallback+0xec>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d168      	bne.n	8000240 <HAL_UART_RxCpltCallback+0xe4>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4836      	ldr	r0, [pc, #216]	; (800024c <HAL_UART_RxCpltCallback+0xf0>)
 8000174:	f000 ffb6 	bl	80010e4 <HAL_GPIO_TogglePin>
        // USART2 DMA reception complete callback
        // Data is available in usart_rx_buffer
    	if(dataReceiver[0] == 'd'){
 8000178:	4b35      	ldr	r3, [pc, #212]	; (8000250 <HAL_UART_RxCpltCallback+0xf4>)
 800017a:	f993 3000 	ldrsb.w	r3, [r3]
 800017e:	2b64      	cmp	r3, #100	; 0x64
 8000180:	d124      	bne.n	80001cc <HAL_UART_RxCpltCallback+0x70>
    		int temp = counterTwoOverFlow*65536 + __HAL_TIM_GET_COUNTER(&htim3);
 8000182:	4b34      	ldr	r3, [pc, #208]	; (8000254 <HAL_UART_RxCpltCallback+0xf8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	041b      	lsls	r3, r3, #16
 8000188:	461a      	mov	r2, r3
 800018a:	4b33      	ldr	r3, [pc, #204]	; (8000258 <HAL_UART_RxCpltCallback+0xfc>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000190:	4413      	add	r3, r2
 8000192:	60fb      	str	r3, [r7, #12]
    		int temp2 = counterOneOverFlow*65536 + __HAL_TIM_GET_COUNTER(&htim2);
 8000194:	4b31      	ldr	r3, [pc, #196]	; (800025c <HAL_UART_RxCpltCallback+0x100>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	041b      	lsls	r3, r3, #16
 800019a:	461a      	mov	r2, r3
 800019c:	4b30      	ldr	r3, [pc, #192]	; (8000260 <HAL_UART_RxCpltCallback+0x104>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001a2:	4413      	add	r3, r2
 80001a4:	60bb      	str	r3, [r7, #8]

    		    // Format the numbers into the string
    		snprintf(transmitData, sizeof(transmitData), "{%d;%d}", temp2, temp);
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	4a2d      	ldr	r2, [pc, #180]	; (8000264 <HAL_UART_RxCpltCallback+0x108>)
 80001ae:	211d      	movs	r1, #29
 80001b0:	482d      	ldr	r0, [pc, #180]	; (8000268 <HAL_UART_RxCpltCallback+0x10c>)
 80001b2:	f002 fcfd 	bl	8002bb0 <sniprintf>
    		HAL_UART_Transmit(&huart2, (uint8_t *)transmitData, strlen(transmitData), 10);
 80001b6:	482c      	ldr	r0, [pc, #176]	; (8000268 <HAL_UART_RxCpltCallback+0x10c>)
 80001b8:	f7ff ffc8 	bl	800014c <strlen>
 80001bc:	4603      	mov	r3, r0
 80001be:	b29a      	uxth	r2, r3
 80001c0:	230a      	movs	r3, #10
 80001c2:	4929      	ldr	r1, [pc, #164]	; (8000268 <HAL_UART_RxCpltCallback+0x10c>)
 80001c4:	4829      	ldr	r0, [pc, #164]	; (800026c <HAL_UART_RxCpltCallback+0x110>)
 80001c6:	f001 ffd4 	bl	8002172 <HAL_UART_Transmit>
 80001ca:	e034      	b.n	8000236 <HAL_UART_RxCpltCallback+0xda>
    	}else if(dataReceiver[0] == 'a'){
 80001cc:	4b20      	ldr	r3, [pc, #128]	; (8000250 <HAL_UART_RxCpltCallback+0xf4>)
 80001ce:	f993 3000 	ldrsb.w	r3, [r3]
 80001d2:	2b61      	cmp	r3, #97	; 0x61
 80001d4:	d115      	bne.n	8000202 <HAL_UART_RxCpltCallback+0xa6>
    		__HAL_TIM_SetCounter(&htim2, 0);
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <HAL_UART_RxCpltCallback+0x104>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2200      	movs	r2, #0
 80001dc:	625a      	str	r2, [r3, #36]	; 0x24
    		counterOneOverFlow = 0;
 80001de:	4b1f      	ldr	r3, [pc, #124]	; (800025c <HAL_UART_RxCpltCallback+0x100>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
    		curCounterOneValue = 0;
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <HAL_UART_RxCpltCallback+0x114>)
 80001e6:	f04f 0300 	mov.w	r3, #0
 80001ea:	f04f 0400 	mov.w	r4, #0
 80001ee:	e9c2 3400 	strd	r3, r4, [r2]
    		counter = 0;
 80001f2:	4a20      	ldr	r2, [pc, #128]	; (8000274 <HAL_UART_RxCpltCallback+0x118>)
 80001f4:	f04f 0300 	mov.w	r3, #0
 80001f8:	f04f 0400 	mov.w	r4, #0
 80001fc:	e9c2 3400 	strd	r3, r4, [r2]
 8000200:	e019      	b.n	8000236 <HAL_UART_RxCpltCallback+0xda>
    	} else if(dataReceiver[0] == 'b'){
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <HAL_UART_RxCpltCallback+0xf4>)
 8000204:	f993 3000 	ldrsb.w	r3, [r3]
 8000208:	2b62      	cmp	r3, #98	; 0x62
 800020a:	d114      	bne.n	8000236 <HAL_UART_RxCpltCallback+0xda>
    		counter2 = 0;
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <HAL_UART_RxCpltCallback+0x11c>)
 800020e:	f04f 0300 	mov.w	r3, #0
 8000212:	f04f 0400 	mov.w	r4, #0
 8000216:	e9c2 3400 	strd	r3, r4, [r2]
    		counterTwoOverFlow = 0;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <HAL_UART_RxCpltCallback+0xf8>)
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
    		curCounterTwoValue = 0;
 8000220:	4a16      	ldr	r2, [pc, #88]	; (800027c <HAL_UART_RxCpltCallback+0x120>)
 8000222:	f04f 0300 	mov.w	r3, #0
 8000226:	f04f 0400 	mov.w	r4, #0
 800022a:	e9c2 3400 	strd	r3, r4, [r2]
    		__HAL_TIM_SetCounter(&htim3, 0);
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <HAL_UART_RxCpltCallback+0xfc>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
    	}
    	HAL_UART_Receive_IT(&huart2, dataReceiver, 1);
 8000236:	2201      	movs	r2, #1
 8000238:	4905      	ldr	r1, [pc, #20]	; (8000250 <HAL_UART_RxCpltCallback+0xf4>)
 800023a:	480c      	ldr	r0, [pc, #48]	; (800026c <HAL_UART_RxCpltCallback+0x110>)
 800023c:	f002 f82b 	bl	8002296 <HAL_UART_Receive_IT>
    }

}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bd90      	pop	{r4, r7, pc}
 8000248:	40004400 	.word	0x40004400
 800024c:	40011000 	.word	0x40011000
 8000250:	20000130 	.word	0x20000130
 8000254:	2000009c 	.word	0x2000009c
 8000258:	200000c8 	.word	0x200000c8
 800025c:	20000098 	.word	0x20000098
 8000260:	20000138 	.word	0x20000138
 8000264:	08003414 	.word	0x08003414
 8000268:	20000110 	.word	0x20000110
 800026c:	20000180 	.word	0x20000180
 8000270:	200000a8 	.word	0x200000a8
 8000274:	20000090 	.word	0x20000090
 8000278:	200000b0 	.word	0x200000b0
 800027c:	200000a0 	.word	0x200000a0

08000280 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000290:	d111      	bne.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x36>
        // Perform your actions here
        // For example, toggle a pin, update variables, etc.
    	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	2b10      	cmp	r3, #16
 800029e:	d105      	bne.n	80002ac <HAL_TIM_PeriodElapsedCallback+0x2c>
    		counterOneOverFlow--;
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	e004      	b.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x36>
    	}else{
    		counterOneOverFlow++;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002b4:	6013      	str	r3, [r2, #0]
    	}
    }
    if (htim->Instance == TIM3) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d111      	bne.n	80002e4 <HAL_TIM_PeriodElapsedCallback+0x64>
            // Perform your actions here
            // For example, toggle a pin, update variables, etc.

    	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0310 	and.w	r3, r3, #16
 80002ca:	2b10      	cmp	r3, #16
 80002cc:	d105      	bne.n	80002da <HAL_TIM_PeriodElapsedCallback+0x5a>
    	    	counterTwoOverFlow--;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002d6:	6013      	str	r3, [r2, #0]
    	    }else{
    	    	counterTwoOverFlow++;
    	    }
        }
}
 80002d8:	e004      	b.n	80002e4 <HAL_TIM_PeriodElapsedCallback+0x64>
    	    	counterTwoOverFlow++;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000138 	.word	0x20000138
 80002f4:	20000098 	.word	0x20000098
 80002f8:	40000400 	.word	0x40000400
 80002fc:	200000c8 	.word	0x200000c8
 8000300:	2000009c 	.word	0x2000009c

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000308:	f000 fb38 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030c:	f000 f830 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000310:	f000 f940 	bl	8000594 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000314:	f000 f86c 	bl	80003f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000318:	f000 f8be 	bl	8000498 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800031c:	f000 f910 	bl	8000540 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000320:	480e      	ldr	r0, [pc, #56]	; (800035c <main+0x58>)
 8000322:	f001 fb15 	bl	8001950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <main+0x5c>)
 8000328:	f001 fb12 	bl	8001950 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800032c:	213c      	movs	r1, #60	; 0x3c
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <main+0x58>)
 8000330:	f001 fc02 	bl	8001b38 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000334:	213c      	movs	r1, #60	; 0x3c
 8000336:	480a      	ldr	r0, [pc, #40]	; (8000360 <main+0x5c>)
 8000338:	f001 fbfe 	bl	8001b38 <HAL_TIM_Encoder_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4808      	ldr	r0, [pc, #32]	; (8000364 <main+0x60>)
 8000344:	f000 feb6 	bl	80010b4 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, dataReceiver, 1);
 8000348:	2201      	movs	r2, #1
 800034a:	4907      	ldr	r1, [pc, #28]	; (8000368 <main+0x64>)
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <main+0x68>)
 800034e:	f001 ffa2 	bl	8002296 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	HAL_Delay(100);
 8000352:	2064      	movs	r0, #100	; 0x64
 8000354:	f000 fb74 	bl	8000a40 <HAL_Delay>
 8000358:	e7fb      	b.n	8000352 <main+0x4e>
 800035a:	bf00      	nop
 800035c:	20000138 	.word	0x20000138
 8000360:	200000c8 	.word	0x200000c8
 8000364:	40011000 	.word	0x40011000
 8000368:	20000130 	.word	0x20000130
 800036c:	20000180 	.word	0x20000180

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b090      	sub	sp, #64	; 0x40
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fc0e 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	2310      	movs	r3, #16
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80003a6:	2300      	movs	r3, #0
 80003a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 feb2 	bl	8001118 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003ba:	f000 f937 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 f91e 	bl	8001618 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80003e2:	f000 f923 	bl	800062c <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3740      	adds	r7, #64	; 0x40
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08c      	sub	sp, #48	; 0x30
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2224      	movs	r2, #36	; 0x24
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fbce 	bl	8002ba0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <MX_TIM2_Init+0xa4>)
 800040e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <MX_TIM2_Init+0xa4>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_TIM2_Init+0xa4>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <MX_TIM2_Init+0xa4>)
 8000422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_TIM2_Init+0xa4>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_TIM2_Init+0xa4>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000434:	2303      	movs	r3, #3
 8000436:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000438:	2302      	movs	r3, #2
 800043a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000444:	2301      	movs	r3, #1
 8000446:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000448:	2302      	movs	r3, #2
 800044a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800044c:	2301      	movs	r3, #1
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000454:	2301      	movs	r3, #1
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000458:	f107 030c 	add.w	r3, r7, #12
 800045c:	4619      	mov	r1, r3
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <MX_TIM2_Init+0xa4>)
 8000460:	f001 fac8 	bl	80019f4 <HAL_TIM_Encoder_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800046a:	f000 f8df 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4806      	ldr	r0, [pc, #24]	; (8000494 <MX_TIM2_Init+0xa4>)
 800047c:	f001 fdbc 	bl	8001ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000486:	f000 f8d1 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	3730      	adds	r7, #48	; 0x30
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000138 	.word	0x20000138

08000498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08c      	sub	sp, #48	; 0x30
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	2224      	movs	r2, #36	; 0x24
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fb7a 	bl	8002ba0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004b6:	4a21      	ldr	r2, [pc, #132]	; (800053c <MX_TIM3_Init+0xa4>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_TIM3_Init+0xa0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004da:	2303      	movs	r3, #3
 80004dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80004de:	2302      	movs	r3, #2
 80004e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80004ee:	2302      	movs	r3, #2
 80004f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004f2:	2301      	movs	r3, #1
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <MX_TIM3_Init+0xa0>)
 8000506:	f001 fa75 	bl	80019f4 <HAL_TIM_Encoder_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000510:	f000 f88c 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM3_Init+0xa0>)
 8000522:	f001 fd69 	bl	8001ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800052c:	f000 f87e 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000c8 	.word	0x200000c8
 800053c:	40000400 	.word	0x40000400

08000540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <MX_USART2_UART_Init+0x50>)
 8000548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800054c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART2_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <MX_USART2_UART_Init+0x4c>)
 8000578:	f001 fdae 	bl	80020d8 <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000582:	f000 f853 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000180 	.word	0x20000180
 8000590:	40004400 	.word	0x40004400

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_GPIO_Init+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <MX_GPIO_Init+0x90>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0310 	and.w	r3, r3, #16
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_GPIO_Init+0x90>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_GPIO_Init+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0x90>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_GPIO_Init+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <MX_GPIO_Init+0x94>)
 80005f8:	f000 fd5c 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2302      	movs	r3, #2
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0x94>)
 8000616:	f000 fbf3 	bl	8000e00 <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40011000 	.word	0x40011000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0x6>

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0318 	add.w	r3, r7, #24
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b6:	d12c      	bne.n	8000712 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a2f      	ldr	r2, [pc, #188]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a29      	ldr	r2, [pc, #164]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006e8:	2303      	movs	r3, #3
 80006ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4821      	ldr	r0, [pc, #132]	; (8000780 <HAL_TIM_Encoder_MspInit+0xe8>)
 80006fc:	f000 fb80 	bl	8000e00 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	201c      	movs	r0, #28
 8000706:	f000 fa94 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800070a:	201c      	movs	r0, #28
 800070c:	f000 faad 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000710:	e030      	b.n	8000774 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <HAL_TIM_Encoder_MspInit+0xec>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d12b      	bne.n	8000774 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a16      	ldr	r2, [pc, #88]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074c:	23c0      	movs	r3, #192	; 0xc0
 800074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0318 	add.w	r3, r7, #24
 800075c:	4619      	mov	r1, r3
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000760:	f000 fb4e 	bl	8000e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	201d      	movs	r0, #29
 800076a:	f000 fa62 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800076e:	201d      	movs	r0, #29
 8000770:	f000 fa7b 	bl	8000c6a <HAL_NVIC_EnableIRQ>
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800
 8000784:	40000400 	.word	0x40000400

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <HAL_UART_MspInit+0x98>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d137      	bne.n	8000818 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d8:	2304      	movs	r3, #4
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007ec:	f000 fb08 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f0:	2308      	movs	r3, #8
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <HAL_UART_MspInit+0xa0>)
 8000804:	f000 fafc 	bl	8000e00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2026      	movs	r0, #38	; 0x26
 800080e:	f000 fa10 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000812:	2026      	movs	r0, #38	; 0x26
 8000814:	f000 fa29 	bl	8000c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000
 8000828:	40010800 	.word	0x40010800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f8c9 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM2_IRQHandler+0x10>)
 8000882:	f001 fa06 	bl	8001c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000138 	.word	0x20000138

08000890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM3_IRQHandler+0x10>)
 8000896:	f001 f9fc 	bl	8001c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000c8 	.word	0x200000c8

080008a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USART2_IRQHandler+0x10>)
 80008aa:	f001 fd25 	bl	80022f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000180 	.word	0x20000180

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f002 f930 	bl	8002b4c <__errno>
 80008ec:	4602      	mov	r2, r0
 80008ee:	230c      	movs	r3, #12
 80008f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20005000 	.word	0x20005000
 8000918:	00000400 	.word	0x00000400
 800091c:	200000b8 	.word	0x200000b8
 8000920:	200001d0 	.word	0x200001d0

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000956:	f7ff ffe5 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f002 f8fd 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fcd1 	bl	8000304 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800096c:	08003484 	.word	0x08003484
  ldr r2, =_sbss
 8000970:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000974:	200001cc 	.word	0x200001cc

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f945 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe4c 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f95d 	bl	8000c86 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f925 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001c4 	.word	0x200001c4

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200001c4 	.word	0x200001c4

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_Delay+0x40>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4906      	ldr	r1, [pc, #24]	; (8000b1c <__NVIC_EnableIRQ+0x34>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff90 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff2d 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff42 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff90 	bl	8000b74 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5f 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff35 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d008      	beq.n	8000cc6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e020      	b.n	8000d08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 020e 	bic.w	r2, r2, #14
 8000cd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d005      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e051      	b.n	8000dda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020e 	bic.w	r2, r2, #14
 8000d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_DMA_Abort_IT+0xd0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d029      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xa0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_DMA_Abort_IT+0xd4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d022      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x9c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_DMA_Abort_IT+0xd8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d01a      	beq.n	8000daa <HAL_DMA_Abort_IT+0x96>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_DMA_Abort_IT+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d012      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x90>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_DMA_Abort_IT+0xe0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00a      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x8a>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_DMA_Abort_IT+0xe4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d102      	bne.n	8000d98 <HAL_DMA_Abort_IT+0x84>
 8000d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d96:	e00e      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d9c:	e00b      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	e008      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	e005      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e002      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db0:	2310      	movs	r3, #16
 8000db2:	e000      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db4:	2301      	movs	r3, #1
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_DMA_Abort_IT+0xe8>)
 8000db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
    } 
  }
  return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40020008 	.word	0x40020008
 8000de8:	4002001c 	.word	0x4002001c
 8000dec:	40020030 	.word	0x40020030
 8000df0:	40020044 	.word	0x40020044
 8000df4:	40020058 	.word	0x40020058
 8000df8:	4002006c 	.word	0x4002006c
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e127      	b.n	8001064 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8116 	bne.w	800105e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d034      	beq.n	8000ea4 <HAL_GPIO_Init+0xa4>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d80d      	bhi.n	8000e5a <HAL_GPIO_Init+0x5a>
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x9a>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d804      	bhi.n	8000e50 <HAL_GPIO_Init+0x50>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d031      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d01c      	beq.n	8000e88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4e:	e048      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d043      	beq.n	8000edc <HAL_GPIO_Init+0xdc>
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d01b      	beq.n	8000e90 <HAL_GPIO_Init+0x90>
          break;
 8000e58:	e043      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e5a:	4a89      	ldr	r2, [pc, #548]	; (8001080 <HAL_GPIO_Init+0x280>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d026      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e60:	4a87      	ldr	r2, [pc, #540]	; (8001080 <HAL_GPIO_Init+0x280>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d806      	bhi.n	8000e74 <HAL_GPIO_Init+0x74>
 8000e66:	4a87      	ldr	r2, [pc, #540]	; (8001084 <HAL_GPIO_Init+0x284>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d020      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e6c:	4a86      	ldr	r2, [pc, #536]	; (8001088 <HAL_GPIO_Init+0x288>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01d      	beq.n	8000eae <HAL_GPIO_Init+0xae>
          break;
 8000e72:	e036      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e74:	4a85      	ldr	r2, [pc, #532]	; (800108c <HAL_GPIO_Init+0x28c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e7a:	4a85      	ldr	r2, [pc, #532]	; (8001090 <HAL_GPIO_Init+0x290>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d016      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e80:	4a84      	ldr	r2, [pc, #528]	; (8001094 <HAL_GPIO_Init+0x294>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0xae>
          break;
 8000e86:	e02c      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e028      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e023      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e01e      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e019      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e012      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d105      	bne.n	8000ed0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	611a      	str	r2, [r3, #16]
          break;
 8000ece:	e008      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	615a      	str	r2, [r3, #20]
          break;
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d801      	bhi.n	8000eec <HAL_GPIO_Init+0xec>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	e001      	b.n	8000ef0 <HAL_GPIO_Init+0xf0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d802      	bhi.n	8000efe <HAL_GPIO_Init+0xfe>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x104>
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	3b08      	subs	r3, #8
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	6a39      	ldr	r1, [r7, #32]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 8096 	beq.w	800105e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f32:	4b59      	ldr	r3, [pc, #356]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a58      	ldr	r2, [pc, #352]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f4a:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x29c>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x19e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x19a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x196>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x192>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb0:	493a      	ldr	r1, [pc, #232]	; (800109c <HAL_GPIO_Init+0x29c>)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4938      	ldr	r1, [pc, #224]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4933      	ldr	r1, [pc, #204]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	492e      	ldr	r1, [pc, #184]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	604b      	str	r3, [r1, #4]
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	4929      	ldr	r1, [pc, #164]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800100a:	4013      	ands	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	4924      	ldr	r1, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	608b      	str	r3, [r1, #8]
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	43db      	mvns	r3, r3
 8001030:	491f      	ldr	r1, [pc, #124]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001032:	4013      	ands	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	491a      	ldr	r1, [pc, #104]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	60cb      	str	r3, [r1, #12]
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4915      	ldr	r1, [pc, #84]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800105a:	4013      	ands	r3, r2
 800105c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3301      	adds	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f47f aed0 	bne.w	8000e14 <HAL_GPIO_Init+0x14>
  }
}
 8001074:	bf00      	nop
 8001076:	372c      	adds	r7, #44	; 0x2c
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	10210000 	.word	0x10210000
 8001084:	10110000 	.word	0x10110000
 8001088:	10120000 	.word	0x10120000
 800108c:	10310000 	.word	0x10310000
 8001090:	10320000 	.word	0x10320000
 8001094:	10220000 	.word	0x10220000
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011000 	.word	0x40011000
 80010ac:	40011400 	.word	0x40011400
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	041a      	lsls	r2, r3, #16
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43d9      	mvns	r1, r3
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	400b      	ands	r3, r1
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	611a      	str	r2, [r3, #16]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
	...

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e26c      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8087 	beq.w	8001246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001138:	4b92      	ldr	r3, [pc, #584]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b04      	cmp	r3, #4
 8001142:	d00c      	beq.n	800115e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001144:	4b8f      	ldr	r3, [pc, #572]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b08      	cmp	r3, #8
 800114e:	d112      	bne.n	8001176 <HAL_RCC_OscConfig+0x5e>
 8001150:	4b8c      	ldr	r3, [pc, #560]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115c:	d10b      	bne.n	8001176 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d06c      	beq.n	8001244 <HAL_RCC_OscConfig+0x12c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d168      	bne.n	8001244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e246      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x76>
 8001180:	4b80      	ldr	r3, [pc, #512]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a7f      	ldr	r2, [pc, #508]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e02e      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7a      	ldr	r2, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b78      	ldr	r3, [pc, #480]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a77      	ldr	r2, [pc, #476]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e01d      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0xbc>
 80011ba:	4b72      	ldr	r3, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a71      	ldr	r2, [pc, #452]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e00b      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 80011d4:	4b6b      	ldr	r3, [pc, #428]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a67      	ldr	r2, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc1a 	bl	8000a2c <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fc16 	bl	8000a2c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1fa      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0xe4>
 800121a:	e014      	b.n	8001246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc06 	bl	8000a2c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fc02 	bl	8000a2c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e1e6      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x10c>
 8001242:	e000      	b.n	8001246 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d063      	beq.n	800131a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001252:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b08      	cmp	r3, #8
 8001268:	d11c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x18c>
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d116      	bne.n	80012a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_RCC_OscConfig+0x176>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e1ba      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4939      	ldr	r1, [pc, #228]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	e03a      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_RCC_OscConfig+0x270>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fbbb 	bl	8000a2c <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fbb7 	bl	8000a2c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e19b      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
 80012ec:	e015      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ee:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_RCC_OscConfig+0x270>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb9a 	bl	8000a2c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff fb96 	bl	8000a2c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e17a      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d03a      	beq.n	800139c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d019      	beq.n	8001362 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_RCC_OscConfig+0x274>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001334:	f7ff fb7a 	bl	8000a2c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133c:	f7ff fb76 	bl	8000a2c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e15a      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_RCC_OscConfig+0x26c>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f000 fada 	bl	8001914 <RCC_Delay>
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_RCC_OscConfig+0x274>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fb60 	bl	8000a2c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136e:	e00f      	b.n	8001390 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fb5c 	bl	8000a2c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d908      	bls.n	8001390 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e140      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	42420000 	.word	0x42420000
 800138c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e9      	bne.n	8001370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a6 	beq.w	80014f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b97      	ldr	r3, [pc, #604]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10d      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b94      	ldr	r3, [pc, #592]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a93      	ldr	r2, [pc, #588]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b91      	ldr	r3, [pc, #580]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	4b8e      	ldr	r3, [pc, #568]	; (8001610 <HAL_RCC_OscConfig+0x4f8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d118      	bne.n	8001414 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a8a      	ldr	r2, [pc, #552]	; (8001610 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb1d 	bl	8000a2c <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fb19 	bl	8000a2c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0fd      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x4f8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x312>
 800141c:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a7a      	ldr	r2, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	e02d      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x334>
 8001432:	4b76      	ldr	r3, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a75      	ldr	r2, [pc, #468]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	4b73      	ldr	r3, [pc, #460]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a72      	ldr	r2, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	e01c      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x356>
 8001454:	4b6d      	ldr	r3, [pc, #436]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a6c      	ldr	r2, [pc, #432]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a69      	ldr	r2, [pc, #420]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x36e>
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a66      	ldr	r2, [pc, #408]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	4b64      	ldr	r3, [pc, #400]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d015      	beq.n	80014ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff facd 	bl	8000a2c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fac9 	bl	8000a2c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0ab      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0ee      	beq.n	8001496 <HAL_RCC_OscConfig+0x37e>
 80014b8:	e014      	b.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fab7 	bl	8000a2c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff fab3 	bl	8000a2c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e095      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ee      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d105      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ea:	4b48      	ldr	r3, [pc, #288]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a47      	ldr	r2, [pc, #284]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8081 	beq.w	8001602 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d061      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d146      	bne.n	80015a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_OscConfig+0x4fc>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa87 	bl	8000a2c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fa83 	bl	8000a2c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e067      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	4b35      	ldr	r3, [pc, #212]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	492d      	ldr	r1, [pc, #180]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a19      	ldr	r1, [r3, #32]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	430b      	orrs	r3, r1
 800156e:	4927      	ldr	r1, [pc, #156]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_OscConfig+0x4fc>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fa57 	bl	8000a2c <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff fa53 	bl	8000a2c <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e037      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x46a>
 80015a0:	e02f      	b.n	8001602 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_RCC_OscConfig+0x4fc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa40 	bl	8000a2c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fa3c 	bl	8000a2c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e020      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x498>
 80015ce:	e018      	b.n	8001602 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e013      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_OscConfig+0x4f4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	40007000 	.word	0x40007000
 8001614:	42420060 	.word	0x42420060

08001618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0d0      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d910      	bls.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4965      	ldr	r1, [pc, #404]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a58      	ldr	r2, [pc, #352]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800167e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e073      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4936      	ldr	r1, [pc, #216]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001708:	f7ff f990 	bl	8000a2c <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f98c 	bl	8000a2c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e053      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d210      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 0207 	bic.w	r2, r3, #7
 800174e:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4601      	mov	r1, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	fa21 f303 	lsr.w	r3, r1, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1cc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f8ee 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08003430 	.word	0x08003430
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b490      	push	{r4, r7}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017f4:	1d3c      	adds	r4, r7, #4
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x40>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x46>
 800182a:	e02d      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800182e:	623b      	str	r3, [r7, #32]
      break;
 8001830:	e02d      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800183e:	4413      	add	r3, r2
 8001840:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001844:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0c5b      	lsrs	r3, r3, #17
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800185e:	4413      	add	r3, r2
 8001860:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001864:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800186a:	fb02 f203 	mul.w	r2, r2, r3
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	e004      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	623b      	str	r3, [r7, #32]
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800188a:	623b      	str	r3, [r7, #32]
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	6a3b      	ldr	r3, [r7, #32]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bc90      	pop	{r4, r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	0800341c 	.word	0x0800341c
 80018a0:	0800342c 	.word	0x0800342c
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	003d0900 	.word	0x003d0900

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	4601      	mov	r1, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	08003440 	.word	0x08003440

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f4:	4601      	mov	r1, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0adb      	lsrs	r3, r3, #11
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	08003440 	.word	0x08003440

08001914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <RCC_Delay+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <RCC_Delay+0x38>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a5b      	lsrs	r3, r3, #9
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001930:	bf00      	nop
  }
  while (Delay --);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <RCC_Delay+0x1c>
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d001      	beq.n	8001968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e03a      	b.n	80019de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_TIM_Base_Start_IT+0x98>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00e      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x58>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001992:	d009      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x58>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_TIM_Base_Start_IT+0x9c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d004      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x58>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d111      	bne.n	80019cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d010      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ca:	e007      	b.n	80019dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800

080019f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e093      	b.n	8001b30 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d106      	bne.n	8001a22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe fe3b 	bl	8000698 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a38:	f023 0307 	bic.w	r3, r3, #7
 8001a3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f000 fa4f 	bl	8001eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	4313      	orrs	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a94:	f023 030c 	bic.w	r3, r3, #12
 8001a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	011a      	lsls	r2, r3, #4
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ad2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d110      	bne.n	8001b8a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b6e:	7b7b      	ldrb	r3, [r7, #13]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d001      	beq.n	8001b78 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e088      	b.n	8001c8a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b88:	e031      	b.n	8001bee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d110      	bne.n	8001bb2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b96:	7b3b      	ldrb	r3, [r7, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e074      	b.n	8001c8a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb0:	e01d      	b.n	8001bee <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d102      	bne.n	8001bca <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e05d      	b.n	8001c8a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_TIM_Encoder_Start_IT+0xc2>
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d010      	beq.n	8001c1a <HAL_TIM_Encoder_Start_IT+0xe2>
 8001bf8:	e01f      	b.n	8001c3a <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f9d4 	bl	8001fb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0202 	orr.w	r2, r2, #2
 8001c16:	60da      	str	r2, [r3, #12]
      break;
 8001c18:	e02e      	b.n	8001c78 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2104      	movs	r1, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f9c4 	bl	8001fb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0204 	orr.w	r2, r2, #4
 8001c36:	60da      	str	r2, [r3, #12]
      break;
 8001c38:	e01e      	b.n	8001c78 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f9b4 	bl	8001fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f9ad 	bl	8001fb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0202 	orr.w	r2, r2, #2
 8001c64:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0204 	orr.w	r2, r2, #4
 8001c74:	60da      	str	r2, [r3, #12]
      break;
 8001c76:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d122      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d11b      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0202 	mvn.w	r2, #2
 8001cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8ed 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001cda:	e005      	b.n	8001ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8e0 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8ef 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d122      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d11b      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0204 	mvn.w	r2, #4
 8001d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8c3 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d2e:	e005      	b.n	8001d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8b6 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c5 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d122      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0208 	mvn.w	r2, #8
 8001d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f899 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d82:	e005      	b.n	8001d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f88c 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89b 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d11b      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 0210 	mvn.w	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f86f 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e005      	b.n	8001de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f862 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f871 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0201 	mvn.w	r2, #1
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fa35 	bl	8000280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f942 	bl	80020c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b40      	cmp	r3, #64	; 0x40
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f835 	bl	8001ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d10e      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0220 	mvn.w	r2, #32
 8001e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f90d 	bl	80020b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
	...

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <TIM_Base_SetConfig+0xbc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x30>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <TIM_Base_SetConfig+0xbc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0x62>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <TIM_Base_SetConfig+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <TIM_Base_SetConfig+0xb8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d103      	bne.n	8001f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	615a      	str	r2, [r3, #20]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800

08001fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	621a      	str	r2, [r3, #32]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800200c:	2302      	movs	r3, #2
 800200e:	e046      	b.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d009      	beq.n	8002072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10c      	bne.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4313      	orrs	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800

080020b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e03f      	b.n	800216a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fb42 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2224      	movs	r2, #36	; 0x24
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800211a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fc87 	bl	8002a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b08a      	sub	sp, #40	; 0x28
 8002176:	af02      	add	r7, sp, #8
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	d17c      	bne.n	800228c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_UART_Transmit+0x2c>
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e075      	b.n	800228e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Transmit+0x3e>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e06e      	b.n	800228e <HAL_UART_Transmit+0x11c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fc31 	bl	8000a2c <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e0:	d108      	bne.n	80021f4 <HAL_UART_Transmit+0x82>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e003      	b.n	80021fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002204:	e02a      	b.n	800225c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa3a 	bl	800268a <UART_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e036      	b.n	800228e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	3302      	adds	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	e007      	b.n	800224e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1cf      	bne.n	8002206 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	2140      	movs	r1, #64	; 0x40
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fa0a 	bl	800268a <UART_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e006      	b.n	800228e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d11d      	bne.n	80022ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_UART_Receive_IT+0x26>
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e016      	b.n	80022ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Receive_IT+0x38>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e00f      	b.n	80022ee <HAL_UART_Receive_IT+0x58>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	461a      	mov	r2, r3
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa1b 	bl	800271e <UART_Start_Receive_IT>
 80022e8:	4603      	mov	r3, r0
 80022ea:	e000      	b.n	80022ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_UART_IRQHandler+0x52>
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 facb 	bl	80028de <UART_Receive_IT>
      return;
 8002348:	e17c      	b.n	8002644 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80b1 	beq.w	80024b4 <HAL_UART_IRQHandler+0x1bc>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_UART_IRQHandler+0x70>
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a6 	beq.w	80024b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_UART_IRQHandler+0x90>
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_UART_IRQHandler+0xb0>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f043 0202 	orr.w	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_UART_IRQHandler+0xd0>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f043 0204 	orr.w	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00f      	beq.n	80023f2 <HAL_UART_IRQHandler+0xfa>
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <HAL_UART_IRQHandler+0xee>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f043 0208 	orr.w	r2, r3, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 811f 	beq.w	800263a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_UART_IRQHandler+0x11e>
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fa64 	bl	80028de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_UART_IRQHandler+0x146>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d031      	beq.n	80024a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9a6 	bl	8002790 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d023      	beq.n	800249a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002460:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	2b00      	cmp	r3, #0
 8002468:	d013      	beq.n	8002492 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_UART_IRQHandler+0x354>)
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fc4c 	bl	8000d14 <HAL_DMA_Abort_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800248c:	4610      	mov	r0, r2
 800248e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	e00e      	b.n	80024b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8e5 	bl	8002662 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e00a      	b.n	80024b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8e1 	bl	8002662 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e006      	b.n	80024b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8dd 	bl	8002662 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024ae:	e0c4      	b.n	800263a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	bf00      	nop
    return;
 80024b2:	e0c2      	b.n	800263a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f040 80a1 	bne.w	8002600 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 809b 	beq.w	8002600 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8095 	beq.w	8002600 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04e      	beq.n	8002598 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002504:	8a3b      	ldrh	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8099 	beq.w	800263e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002510:	8a3a      	ldrh	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	f080 8093 	bcs.w	800263e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8a3a      	ldrh	r2, [r7, #16]
 800251c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b20      	cmp	r3, #32
 8002526:	d02b      	beq.n	8002580 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002536:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002556:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0210 	bic.w	r2, r2, #16
 8002574:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fb8f 	bl	8000c9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002588:	b29b      	uxth	r3, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	b29b      	uxth	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f86f 	bl	8002674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002596:	e052      	b.n	800263e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d048      	beq.n	8002642 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80025b0:	8a7b      	ldrh	r3, [r7, #18]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d045      	beq.n	8002642 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f4:	8a7b      	ldrh	r3, [r7, #18]
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f83b 	bl	8002674 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025fe:	e020      	b.n	8002642 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_UART_IRQHandler+0x324>
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f8fb 	bl	8002810 <UART_Transmit_IT>
    return;
 800261a:	e013      	b.n	8002644 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00e      	beq.n	8002644 <HAL_UART_IRQHandler+0x34c>
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f93c 	bl	80028ae <UART_EndTransmit_IT>
    return;
 8002636:	bf00      	nop
 8002638:	e004      	b.n	8002644 <HAL_UART_IRQHandler+0x34c>
    return;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <HAL_UART_IRQHandler+0x34c>
      return;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <HAL_UART_IRQHandler+0x34c>
      return;
 8002642:	bf00      	nop
  }
}
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	080027e9 	.word	0x080027e9

08002650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800269a:	e02c      	b.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d028      	beq.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <UART_WaitOnFlagUntilTimeout+0x30>
 80026aa:	f7fe f9bf 	bl	8000a2c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d21d      	bcs.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e00f      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	429a      	cmp	r2, r3
 8002712:	d0c3      	beq.n	800269c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	4613      	mov	r3, r2
 800272a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2222      	movs	r2, #34	; 0x22
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0210 	bic.w	r2, r2, #16
 80027ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ff2d 	bl	8002662 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b21      	cmp	r3, #33	; 0x21
 8002822:	d13e      	bne.n	80028a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	d114      	bne.n	8002858 <UART_Transmit_IT+0x48>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d110      	bne.n	8002858 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800284a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	1c9a      	adds	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]
 8002856:	e008      	b.n	800286a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6211      	str	r1, [r2, #32]
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	84d1      	strh	r1, [r2, #38]	; 0x26
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff febe 	bl	8002650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b22      	cmp	r3, #34	; 0x22
 80028f0:	f040 8099 	bne.w	8002a26 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d117      	bne.n	800292e <UART_Receive_IT+0x50>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d113      	bne.n	800292e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291c:	b29a      	uxth	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
 800292c:	e026      	b.n	800297c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d007      	beq.n	8002952 <UART_Receive_IT+0x74>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <UART_Receive_IT+0x82>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e008      	b.n	8002972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b2da      	uxtb	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4619      	mov	r1, r3
 800298a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800298c:	2b00      	cmp	r3, #0
 800298e:	d148      	bne.n	8002a22 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0220 	bic.w	r2, r2, #32
 800299e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d123      	bne.n	8002a18 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0210 	bic.w	r2, r2, #16
 80029e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d10a      	bne.n	8002a0a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fe2f 	bl	8002674 <HAL_UARTEx_RxEventCallback>
 8002a16:	e002      	b.n	8002a1e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fd fb9f 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e002      	b.n	8002a28 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a6a:	f023 030c 	bic.w	r3, r3, #12
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <UART_SetConfig+0x114>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d103      	bne.n	8002aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7fe ff28 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	e002      	b.n	8002aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aa0:	f7fe ff10 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8002aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <UART_SetConfig+0x118>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	0119      	lsls	r1, r3, #4
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	; 0x32
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afc:	4419      	add	r1, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <UART_SetConfig+0x118>)
 8002b16:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	; 0x32
 8002b28:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <UART_SetConfig+0x118>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	440a      	add	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40013800 	.word	0x40013800
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <__errno>:
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <__errno+0x8>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	4e0c      	ldr	r6, [pc, #48]	; (8002b90 <__libc_init_array+0x38>)
 8002b5e:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b60:	1ba4      	subs	r4, r4, r6
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	42a5      	cmp	r5, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	f000 fc48 	bl	80033fc <_init>
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	4e0a      	ldr	r6, [pc, #40]	; (8002b98 <__libc_init_array+0x40>)
 8002b70:	4c0a      	ldr	r4, [pc, #40]	; (8002b9c <__libc_init_array+0x44>)
 8002b72:	1ba4      	subs	r4, r4, r6
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	42a5      	cmp	r5, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b80:	4798      	blx	r3
 8002b82:	3501      	adds	r5, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b8a:	4798      	blx	r3
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	0800347c 	.word	0x0800347c
 8002b94:	0800347c 	.word	0x0800347c
 8002b98:	0800347c 	.word	0x0800347c
 8002b9c:	08003480 	.word	0x08003480

08002ba0 <memset>:
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <sniprintf>:
 8002bb0:	b40c      	push	{r2, r3}
 8002bb2:	b530      	push	{r4, r5, lr}
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <sniprintf+0x64>)
 8002bb6:	1e0c      	subs	r4, r1, #0
 8002bb8:	b09d      	sub	sp, #116	; 0x74
 8002bba:	681d      	ldr	r5, [r3, #0]
 8002bbc:	da08      	bge.n	8002bd0 <sniprintf+0x20>
 8002bbe:	238b      	movs	r3, #139	; 0x8b
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	602b      	str	r3, [r5, #0]
 8002bc6:	b01d      	add	sp, #116	; 0x74
 8002bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bcc:	b002      	add	sp, #8
 8002bce:	4770      	bx	lr
 8002bd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002bd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002bd8:	bf0c      	ite	eq
 8002bda:	4623      	moveq	r3, r4
 8002bdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002be0:	9304      	str	r3, [sp, #16]
 8002be2:	9307      	str	r3, [sp, #28]
 8002be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be8:	9002      	str	r0, [sp, #8]
 8002bea:	9006      	str	r0, [sp, #24]
 8002bec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002bf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002bf2:	ab21      	add	r3, sp, #132	; 0x84
 8002bf4:	a902      	add	r1, sp, #8
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	f000 f867 	bl	8002ccc <_svfiprintf_r>
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	bfbc      	itt	lt
 8002c02:	238b      	movlt	r3, #139	; 0x8b
 8002c04:	602b      	strlt	r3, [r5, #0]
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d0dd      	beq.n	8002bc6 <sniprintf+0x16>
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	9b02      	ldr	r3, [sp, #8]
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e7d9      	b.n	8002bc6 <sniprintf+0x16>
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <__ssputs_r>:
 8002c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c1c:	688e      	ldr	r6, [r1, #8]
 8002c1e:	4682      	mov	sl, r0
 8002c20:	429e      	cmp	r6, r3
 8002c22:	460c      	mov	r4, r1
 8002c24:	4690      	mov	r8, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	d837      	bhi.n	8002c9a <__ssputs_r+0x82>
 8002c2a:	898a      	ldrh	r2, [r1, #12]
 8002c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c30:	d031      	beq.n	8002c96 <__ssputs_r+0x7e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	6825      	ldr	r5, [r4, #0]
 8002c36:	6909      	ldr	r1, [r1, #16]
 8002c38:	1a6f      	subs	r7, r5, r1
 8002c3a:	6965      	ldr	r5, [r4, #20]
 8002c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c40:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c44:	f109 0301 	add.w	r3, r9, #1
 8002c48:	443b      	add	r3, r7
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	bf38      	it	cc
 8002c4e:	461d      	movcc	r5, r3
 8002c50:	0553      	lsls	r3, r2, #21
 8002c52:	d530      	bpl.n	8002cb6 <__ssputs_r+0x9e>
 8002c54:	4629      	mov	r1, r5
 8002c56:	f000 fb37 	bl	80032c8 <_malloc_r>
 8002c5a:	4606      	mov	r6, r0
 8002c5c:	b950      	cbnz	r0, 8002c74 <__ssputs_r+0x5c>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f8ca 3000 	str.w	r3, [sl]
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c74:	463a      	mov	r2, r7
 8002c76:	6921      	ldr	r1, [r4, #16]
 8002c78:	f000 fab6 	bl	80031e8 <memcpy>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	6126      	str	r6, [r4, #16]
 8002c8a:	443e      	add	r6, r7
 8002c8c:	6026      	str	r6, [r4, #0]
 8002c8e:	464e      	mov	r6, r9
 8002c90:	6165      	str	r5, [r4, #20]
 8002c92:	1bed      	subs	r5, r5, r7
 8002c94:	60a5      	str	r5, [r4, #8]
 8002c96:	454e      	cmp	r6, r9
 8002c98:	d900      	bls.n	8002c9c <__ssputs_r+0x84>
 8002c9a:	464e      	mov	r6, r9
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4641      	mov	r1, r8
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	f000 faac 	bl	80031fe <memmove>
 8002ca6:	68a3      	ldr	r3, [r4, #8]
 8002ca8:	2000      	movs	r0, #0
 8002caa:	1b9b      	subs	r3, r3, r6
 8002cac:	60a3      	str	r3, [r4, #8]
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	441e      	add	r6, r3
 8002cb2:	6026      	str	r6, [r4, #0]
 8002cb4:	e7dc      	b.n	8002c70 <__ssputs_r+0x58>
 8002cb6:	462a      	mov	r2, r5
 8002cb8:	f000 fb60 	bl	800337c <_realloc_r>
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d1e2      	bne.n	8002c88 <__ssputs_r+0x70>
 8002cc2:	6921      	ldr	r1, [r4, #16]
 8002cc4:	4650      	mov	r0, sl
 8002cc6:	f000 fab3 	bl	8003230 <_free_r>
 8002cca:	e7c8      	b.n	8002c5e <__ssputs_r+0x46>

08002ccc <_svfiprintf_r>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	898b      	ldrh	r3, [r1, #12]
 8002cd4:	b09d      	sub	sp, #116	; 0x74
 8002cd6:	061f      	lsls	r7, r3, #24
 8002cd8:	4680      	mov	r8, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4616      	mov	r6, r2
 8002cde:	d50f      	bpl.n	8002d00 <_svfiprintf_r+0x34>
 8002ce0:	690b      	ldr	r3, [r1, #16]
 8002ce2:	b96b      	cbnz	r3, 8002d00 <_svfiprintf_r+0x34>
 8002ce4:	2140      	movs	r1, #64	; 0x40
 8002ce6:	f000 faef 	bl	80032c8 <_malloc_r>
 8002cea:	6020      	str	r0, [r4, #0]
 8002cec:	6120      	str	r0, [r4, #16]
 8002cee:	b928      	cbnz	r0, 8002cfc <_svfiprintf_r+0x30>
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	f8c8 3000 	str.w	r3, [r8]
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfa:	e0c8      	b.n	8002e8e <_svfiprintf_r+0x1c2>
 8002cfc:	2340      	movs	r3, #64	; 0x40
 8002cfe:	6163      	str	r3, [r4, #20]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9309      	str	r3, [sp, #36]	; 0x24
 8002d04:	2320      	movs	r3, #32
 8002d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d0a:	2330      	movs	r3, #48	; 0x30
 8002d0c:	f04f 0b01 	mov.w	fp, #1
 8002d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d14:	9503      	str	r5, [sp, #12]
 8002d16:	4637      	mov	r7, r6
 8002d18:	463d      	mov	r5, r7
 8002d1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d1e:	b10b      	cbz	r3, 8002d24 <_svfiprintf_r+0x58>
 8002d20:	2b25      	cmp	r3, #37	; 0x25
 8002d22:	d13e      	bne.n	8002da2 <_svfiprintf_r+0xd6>
 8002d24:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d28:	d00b      	beq.n	8002d42 <_svfiprintf_r+0x76>
 8002d2a:	4653      	mov	r3, sl
 8002d2c:	4632      	mov	r2, r6
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4640      	mov	r0, r8
 8002d32:	f7ff ff71 	bl	8002c18 <__ssputs_r>
 8002d36:	3001      	adds	r0, #1
 8002d38:	f000 80a4 	beq.w	8002e84 <_svfiprintf_r+0x1b8>
 8002d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d3e:	4453      	add	r3, sl
 8002d40:	9309      	str	r3, [sp, #36]	; 0x24
 8002d42:	783b      	ldrb	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 809d 	beq.w	8002e84 <_svfiprintf_r+0x1b8>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	9307      	str	r3, [sp, #28]
 8002d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8002d5e:	462f      	mov	r7, r5
 8002d60:	2205      	movs	r2, #5
 8002d62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d66:	4850      	ldr	r0, [pc, #320]	; (8002ea8 <_svfiprintf_r+0x1dc>)
 8002d68:	f000 fa30 	bl	80031cc <memchr>
 8002d6c:	9b04      	ldr	r3, [sp, #16]
 8002d6e:	b9d0      	cbnz	r0, 8002da6 <_svfiprintf_r+0xda>
 8002d70:	06d9      	lsls	r1, r3, #27
 8002d72:	bf44      	itt	mi
 8002d74:	2220      	movmi	r2, #32
 8002d76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d7a:	071a      	lsls	r2, r3, #28
 8002d7c:	bf44      	itt	mi
 8002d7e:	222b      	movmi	r2, #43	; 0x2b
 8002d80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d84:	782a      	ldrb	r2, [r5, #0]
 8002d86:	2a2a      	cmp	r2, #42	; 0x2a
 8002d88:	d015      	beq.n	8002db6 <_svfiprintf_r+0xea>
 8002d8a:	462f      	mov	r7, r5
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	250a      	movs	r5, #10
 8002d90:	9a07      	ldr	r2, [sp, #28]
 8002d92:	4639      	mov	r1, r7
 8002d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d98:	3b30      	subs	r3, #48	; 0x30
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d94d      	bls.n	8002e3a <_svfiprintf_r+0x16e>
 8002d9e:	b1b8      	cbz	r0, 8002dd0 <_svfiprintf_r+0x104>
 8002da0:	e00f      	b.n	8002dc2 <_svfiprintf_r+0xf6>
 8002da2:	462f      	mov	r7, r5
 8002da4:	e7b8      	b.n	8002d18 <_svfiprintf_r+0x4c>
 8002da6:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <_svfiprintf_r+0x1dc>)
 8002da8:	463d      	mov	r5, r7
 8002daa:	1a80      	subs	r0, r0, r2
 8002dac:	fa0b f000 	lsl.w	r0, fp, r0
 8002db0:	4318      	orrs	r0, r3
 8002db2:	9004      	str	r0, [sp, #16]
 8002db4:	e7d3      	b.n	8002d5e <_svfiprintf_r+0x92>
 8002db6:	9a03      	ldr	r2, [sp, #12]
 8002db8:	1d11      	adds	r1, r2, #4
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2a00      	cmp	r2, #0
 8002dc0:	db01      	blt.n	8002dc6 <_svfiprintf_r+0xfa>
 8002dc2:	9207      	str	r2, [sp, #28]
 8002dc4:	e004      	b.n	8002dd0 <_svfiprintf_r+0x104>
 8002dc6:	4252      	negs	r2, r2
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	9207      	str	r2, [sp, #28]
 8002dce:	9304      	str	r3, [sp, #16]
 8002dd0:	783b      	ldrb	r3, [r7, #0]
 8002dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd4:	d10c      	bne.n	8002df0 <_svfiprintf_r+0x124>
 8002dd6:	787b      	ldrb	r3, [r7, #1]
 8002dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dda:	d133      	bne.n	8002e44 <_svfiprintf_r+0x178>
 8002ddc:	9b03      	ldr	r3, [sp, #12]
 8002dde:	3702      	adds	r7, #2
 8002de0:	1d1a      	adds	r2, r3, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	9203      	str	r2, [sp, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bfb8      	it	lt
 8002dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dee:	9305      	str	r3, [sp, #20]
 8002df0:	4d2e      	ldr	r5, [pc, #184]	; (8002eac <_svfiprintf_r+0x1e0>)
 8002df2:	2203      	movs	r2, #3
 8002df4:	7839      	ldrb	r1, [r7, #0]
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f9e8 	bl	80031cc <memchr>
 8002dfc:	b138      	cbz	r0, 8002e0e <_svfiprintf_r+0x142>
 8002dfe:	2340      	movs	r3, #64	; 0x40
 8002e00:	1b40      	subs	r0, r0, r5
 8002e02:	fa03 f000 	lsl.w	r0, r3, r0
 8002e06:	9b04      	ldr	r3, [sp, #16]
 8002e08:	3701      	adds	r7, #1
 8002e0a:	4303      	orrs	r3, r0
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	7839      	ldrb	r1, [r7, #0]
 8002e10:	2206      	movs	r2, #6
 8002e12:	4827      	ldr	r0, [pc, #156]	; (8002eb0 <_svfiprintf_r+0x1e4>)
 8002e14:	1c7e      	adds	r6, r7, #1
 8002e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e1a:	f000 f9d7 	bl	80031cc <memchr>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d038      	beq.n	8002e94 <_svfiprintf_r+0x1c8>
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <_svfiprintf_r+0x1e8>)
 8002e24:	bb13      	cbnz	r3, 8002e6c <_svfiprintf_r+0x1a0>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	3307      	adds	r3, #7
 8002e2a:	f023 0307 	bic.w	r3, r3, #7
 8002e2e:	3308      	adds	r3, #8
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e34:	444b      	add	r3, r9
 8002e36:	9309      	str	r3, [sp, #36]	; 0x24
 8002e38:	e76d      	b.n	8002d16 <_svfiprintf_r+0x4a>
 8002e3a:	fb05 3202 	mla	r2, r5, r2, r3
 8002e3e:	2001      	movs	r0, #1
 8002e40:	460f      	mov	r7, r1
 8002e42:	e7a6      	b.n	8002d92 <_svfiprintf_r+0xc6>
 8002e44:	2300      	movs	r3, #0
 8002e46:	250a      	movs	r5, #10
 8002e48:	4619      	mov	r1, r3
 8002e4a:	3701      	adds	r7, #1
 8002e4c:	9305      	str	r3, [sp, #20]
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e54:	3a30      	subs	r2, #48	; 0x30
 8002e56:	2a09      	cmp	r2, #9
 8002e58:	d903      	bls.n	8002e62 <_svfiprintf_r+0x196>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0c8      	beq.n	8002df0 <_svfiprintf_r+0x124>
 8002e5e:	9105      	str	r1, [sp, #20]
 8002e60:	e7c6      	b.n	8002df0 <_svfiprintf_r+0x124>
 8002e62:	fb05 2101 	mla	r1, r5, r1, r2
 8002e66:	2301      	movs	r3, #1
 8002e68:	4607      	mov	r7, r0
 8002e6a:	e7f0      	b.n	8002e4e <_svfiprintf_r+0x182>
 8002e6c:	ab03      	add	r3, sp, #12
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4622      	mov	r2, r4
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <_svfiprintf_r+0x1ec>)
 8002e74:	a904      	add	r1, sp, #16
 8002e76:	4640      	mov	r0, r8
 8002e78:	f3af 8000 	nop.w
 8002e7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e80:	4681      	mov	r9, r0
 8002e82:	d1d6      	bne.n	8002e32 <_svfiprintf_r+0x166>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	065b      	lsls	r3, r3, #25
 8002e88:	f53f af35 	bmi.w	8002cf6 <_svfiprintf_r+0x2a>
 8002e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e8e:	b01d      	add	sp, #116	; 0x74
 8002e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e94:	ab03      	add	r3, sp, #12
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_svfiprintf_r+0x1ec>)
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	f000 f882 	bl	8002fa8 <_printf_i>
 8002ea4:	e7ea      	b.n	8002e7c <_svfiprintf_r+0x1b0>
 8002ea6:	bf00      	nop
 8002ea8:	08003448 	.word	0x08003448
 8002eac:	0800344e 	.word	0x0800344e
 8002eb0:	08003452 	.word	0x08003452
 8002eb4:	00000000 	.word	0x00000000
 8002eb8:	08002c19 	.word	0x08002c19

08002ebc <_printf_common>:
 8002ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	4691      	mov	r9, r2
 8002ec2:	461f      	mov	r7, r3
 8002ec4:	688a      	ldr	r2, [r1, #8]
 8002ec6:	690b      	ldr	r3, [r1, #16]
 8002ec8:	4606      	mov	r6, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	bfb8      	it	lt
 8002ece:	4613      	movlt	r3, r2
 8002ed0:	f8c9 3000 	str.w	r3, [r9]
 8002ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed8:	460c      	mov	r4, r1
 8002eda:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ede:	b112      	cbz	r2, 8002ee6 <_printf_common+0x2a>
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c9 3000 	str.w	r3, [r9]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	0699      	lsls	r1, r3, #26
 8002eea:	bf42      	ittt	mi
 8002eec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ef0:	3302      	addmi	r3, #2
 8002ef2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ef6:	6825      	ldr	r5, [r4, #0]
 8002ef8:	f015 0506 	ands.w	r5, r5, #6
 8002efc:	d107      	bne.n	8002f0e <_printf_common+0x52>
 8002efe:	f104 0a19 	add.w	sl, r4, #25
 8002f02:	68e3      	ldr	r3, [r4, #12]
 8002f04:	f8d9 2000 	ldr.w	r2, [r9]
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	42ab      	cmp	r3, r5
 8002f0c:	dc29      	bgt.n	8002f62 <_printf_common+0xa6>
 8002f0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f12:	6822      	ldr	r2, [r4, #0]
 8002f14:	3300      	adds	r3, #0
 8002f16:	bf18      	it	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	0692      	lsls	r2, r2, #26
 8002f1c:	d42e      	bmi.n	8002f7c <_printf_common+0xc0>
 8002f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f22:	4639      	mov	r1, r7
 8002f24:	4630      	mov	r0, r6
 8002f26:	47c0      	blx	r8
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d021      	beq.n	8002f70 <_printf_common+0xb4>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	68e5      	ldr	r5, [r4, #12]
 8002f30:	f003 0306 	and.w	r3, r3, #6
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	bf18      	it	ne
 8002f38:	2500      	movne	r5, #0
 8002f3a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f3e:	f04f 0900 	mov.w	r9, #0
 8002f42:	bf08      	it	eq
 8002f44:	1aad      	subeq	r5, r5, r2
 8002f46:	68a3      	ldr	r3, [r4, #8]
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	bf08      	it	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bfc4      	itt	gt
 8002f54:	1a9b      	subgt	r3, r3, r2
 8002f56:	18ed      	addgt	r5, r5, r3
 8002f58:	341a      	adds	r4, #26
 8002f5a:	454d      	cmp	r5, r9
 8002f5c:	d11a      	bne.n	8002f94 <_printf_common+0xd8>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e008      	b.n	8002f74 <_printf_common+0xb8>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4652      	mov	r2, sl
 8002f66:	4639      	mov	r1, r7
 8002f68:	4630      	mov	r0, r6
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d103      	bne.n	8002f78 <_printf_common+0xbc>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7c2      	b.n	8002f02 <_printf_common+0x46>
 8002f7c:	2030      	movs	r0, #48	; 0x30
 8002f7e:	18e1      	adds	r1, r4, r3
 8002f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8a:	4422      	add	r2, r4
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f92:	e7c4      	b.n	8002f1e <_printf_common+0x62>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4622      	mov	r2, r4
 8002f98:	4639      	mov	r1, r7
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0e6      	beq.n	8002f70 <_printf_common+0xb4>
 8002fa2:	f109 0901 	add.w	r9, r9, #1
 8002fa6:	e7d8      	b.n	8002f5a <_printf_common+0x9e>

08002fa8 <_printf_i>:
 8002fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	7e09      	ldrb	r1, [r1, #24]
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	296e      	cmp	r1, #110	; 0x6e
 8002fb8:	4617      	mov	r7, r2
 8002fba:	4606      	mov	r6, r0
 8002fbc:	4698      	mov	r8, r3
 8002fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fc0:	f000 80b3 	beq.w	800312a <_printf_i+0x182>
 8002fc4:	d822      	bhi.n	800300c <_printf_i+0x64>
 8002fc6:	2963      	cmp	r1, #99	; 0x63
 8002fc8:	d036      	beq.n	8003038 <_printf_i+0x90>
 8002fca:	d80a      	bhi.n	8002fe2 <_printf_i+0x3a>
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	f000 80b9 	beq.w	8003144 <_printf_i+0x19c>
 8002fd2:	2958      	cmp	r1, #88	; 0x58
 8002fd4:	f000 8083 	beq.w	80030de <_printf_i+0x136>
 8002fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fe0:	e032      	b.n	8003048 <_printf_i+0xa0>
 8002fe2:	2964      	cmp	r1, #100	; 0x64
 8002fe4:	d001      	beq.n	8002fea <_printf_i+0x42>
 8002fe6:	2969      	cmp	r1, #105	; 0x69
 8002fe8:	d1f6      	bne.n	8002fd8 <_printf_i+0x30>
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	0605      	lsls	r5, r0, #24
 8002ff0:	f103 0104 	add.w	r1, r3, #4
 8002ff4:	d52a      	bpl.n	800304c <_printf_i+0xa4>
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6011      	str	r1, [r2, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da03      	bge.n	8003006 <_printf_i+0x5e>
 8002ffe:	222d      	movs	r2, #45	; 0x2d
 8003000:	425b      	negs	r3, r3
 8003002:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003006:	486f      	ldr	r0, [pc, #444]	; (80031c4 <_printf_i+0x21c>)
 8003008:	220a      	movs	r2, #10
 800300a:	e039      	b.n	8003080 <_printf_i+0xd8>
 800300c:	2973      	cmp	r1, #115	; 0x73
 800300e:	f000 809d 	beq.w	800314c <_printf_i+0x1a4>
 8003012:	d808      	bhi.n	8003026 <_printf_i+0x7e>
 8003014:	296f      	cmp	r1, #111	; 0x6f
 8003016:	d020      	beq.n	800305a <_printf_i+0xb2>
 8003018:	2970      	cmp	r1, #112	; 0x70
 800301a:	d1dd      	bne.n	8002fd8 <_printf_i+0x30>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	e003      	b.n	800302e <_printf_i+0x86>
 8003026:	2975      	cmp	r1, #117	; 0x75
 8003028:	d017      	beq.n	800305a <_printf_i+0xb2>
 800302a:	2978      	cmp	r1, #120	; 0x78
 800302c:	d1d4      	bne.n	8002fd8 <_printf_i+0x30>
 800302e:	2378      	movs	r3, #120	; 0x78
 8003030:	4865      	ldr	r0, [pc, #404]	; (80031c8 <_printf_i+0x220>)
 8003032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003036:	e055      	b.n	80030e4 <_printf_i+0x13c>
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303e:	1d19      	adds	r1, r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003048:	2301      	movs	r3, #1
 800304a:	e08c      	b.n	8003166 <_printf_i+0x1be>
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	bf18      	it	ne
 8003056:	b21b      	sxthne	r3, r3
 8003058:	e7cf      	b.n	8002ffa <_printf_i+0x52>
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	6825      	ldr	r5, [r4, #0]
 800305e:	1d18      	adds	r0, r3, #4
 8003060:	6010      	str	r0, [r2, #0]
 8003062:	0628      	lsls	r0, r5, #24
 8003064:	d501      	bpl.n	800306a <_printf_i+0xc2>
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	e002      	b.n	8003070 <_printf_i+0xc8>
 800306a:	0668      	lsls	r0, r5, #25
 800306c:	d5fb      	bpl.n	8003066 <_printf_i+0xbe>
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	296f      	cmp	r1, #111	; 0x6f
 8003072:	bf14      	ite	ne
 8003074:	220a      	movne	r2, #10
 8003076:	2208      	moveq	r2, #8
 8003078:	4852      	ldr	r0, [pc, #328]	; (80031c4 <_printf_i+0x21c>)
 800307a:	2100      	movs	r1, #0
 800307c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003080:	6865      	ldr	r5, [r4, #4]
 8003082:	2d00      	cmp	r5, #0
 8003084:	60a5      	str	r5, [r4, #8]
 8003086:	f2c0 8095 	blt.w	80031b4 <_printf_i+0x20c>
 800308a:	6821      	ldr	r1, [r4, #0]
 800308c:	f021 0104 	bic.w	r1, r1, #4
 8003090:	6021      	str	r1, [r4, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d13d      	bne.n	8003112 <_printf_i+0x16a>
 8003096:	2d00      	cmp	r5, #0
 8003098:	f040 808e 	bne.w	80031b8 <_printf_i+0x210>
 800309c:	4665      	mov	r5, ip
 800309e:	2a08      	cmp	r2, #8
 80030a0:	d10b      	bne.n	80030ba <_printf_i+0x112>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	07db      	lsls	r3, r3, #31
 80030a6:	d508      	bpl.n	80030ba <_printf_i+0x112>
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	6862      	ldr	r2, [r4, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	bfde      	ittt	le
 80030b0:	2330      	movle	r3, #48	; 0x30
 80030b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030ba:	ebac 0305 	sub.w	r3, ip, r5
 80030be:	6123      	str	r3, [r4, #16]
 80030c0:	f8cd 8000 	str.w	r8, [sp]
 80030c4:	463b      	mov	r3, r7
 80030c6:	aa03      	add	r2, sp, #12
 80030c8:	4621      	mov	r1, r4
 80030ca:	4630      	mov	r0, r6
 80030cc:	f7ff fef6 	bl	8002ebc <_printf_common>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d14d      	bne.n	8003170 <_printf_i+0x1c8>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	b005      	add	sp, #20
 80030da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030de:	4839      	ldr	r0, [pc, #228]	; (80031c4 <_printf_i+0x21c>)
 80030e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	6821      	ldr	r1, [r4, #0]
 80030e8:	1d1d      	adds	r5, r3, #4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6015      	str	r5, [r2, #0]
 80030ee:	060a      	lsls	r2, r1, #24
 80030f0:	d50b      	bpl.n	800310a <_printf_i+0x162>
 80030f2:	07ca      	lsls	r2, r1, #31
 80030f4:	bf44      	itt	mi
 80030f6:	f041 0120 	orrmi.w	r1, r1, #32
 80030fa:	6021      	strmi	r1, [r4, #0]
 80030fc:	b91b      	cbnz	r3, 8003106 <_printf_i+0x15e>
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	f022 0220 	bic.w	r2, r2, #32
 8003104:	6022      	str	r2, [r4, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	e7b7      	b.n	800307a <_printf_i+0xd2>
 800310a:	064d      	lsls	r5, r1, #25
 800310c:	bf48      	it	mi
 800310e:	b29b      	uxthmi	r3, r3
 8003110:	e7ef      	b.n	80030f2 <_printf_i+0x14a>
 8003112:	4665      	mov	r5, ip
 8003114:	fbb3 f1f2 	udiv	r1, r3, r2
 8003118:	fb02 3311 	mls	r3, r2, r1, r3
 800311c:	5cc3      	ldrb	r3, [r0, r3]
 800311e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003122:	460b      	mov	r3, r1
 8003124:	2900      	cmp	r1, #0
 8003126:	d1f5      	bne.n	8003114 <_printf_i+0x16c>
 8003128:	e7b9      	b.n	800309e <_printf_i+0xf6>
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	6825      	ldr	r5, [r4, #0]
 800312e:	1d18      	adds	r0, r3, #4
 8003130:	6961      	ldr	r1, [r4, #20]
 8003132:	6010      	str	r0, [r2, #0]
 8003134:	0628      	lsls	r0, r5, #24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	d501      	bpl.n	800313e <_printf_i+0x196>
 800313a:	6019      	str	r1, [r3, #0]
 800313c:	e002      	b.n	8003144 <_printf_i+0x19c>
 800313e:	066a      	lsls	r2, r5, #25
 8003140:	d5fb      	bpl.n	800313a <_printf_i+0x192>
 8003142:	8019      	strh	r1, [r3, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	4665      	mov	r5, ip
 8003148:	6123      	str	r3, [r4, #16]
 800314a:	e7b9      	b.n	80030c0 <_printf_i+0x118>
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	1d19      	adds	r1, r3, #4
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	681d      	ldr	r5, [r3, #0]
 8003154:	6862      	ldr	r2, [r4, #4]
 8003156:	2100      	movs	r1, #0
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f837 	bl	80031cc <memchr>
 800315e:	b108      	cbz	r0, 8003164 <_printf_i+0x1bc>
 8003160:	1b40      	subs	r0, r0, r5
 8003162:	6060      	str	r0, [r4, #4]
 8003164:	6863      	ldr	r3, [r4, #4]
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	2300      	movs	r3, #0
 800316a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316e:	e7a7      	b.n	80030c0 <_printf_i+0x118>
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	462a      	mov	r2, r5
 8003174:	4639      	mov	r1, r7
 8003176:	4630      	mov	r0, r6
 8003178:	47c0      	blx	r8
 800317a:	3001      	adds	r0, #1
 800317c:	d0aa      	beq.n	80030d4 <_printf_i+0x12c>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	079b      	lsls	r3, r3, #30
 8003182:	d413      	bmi.n	80031ac <_printf_i+0x204>
 8003184:	68e0      	ldr	r0, [r4, #12]
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	4298      	cmp	r0, r3
 800318a:	bfb8      	it	lt
 800318c:	4618      	movlt	r0, r3
 800318e:	e7a3      	b.n	80030d8 <_printf_i+0x130>
 8003190:	2301      	movs	r3, #1
 8003192:	464a      	mov	r2, r9
 8003194:	4639      	mov	r1, r7
 8003196:	4630      	mov	r0, r6
 8003198:	47c0      	blx	r8
 800319a:	3001      	adds	r0, #1
 800319c:	d09a      	beq.n	80030d4 <_printf_i+0x12c>
 800319e:	3501      	adds	r5, #1
 80031a0:	68e3      	ldr	r3, [r4, #12]
 80031a2:	9a03      	ldr	r2, [sp, #12]
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	dcf2      	bgt.n	8003190 <_printf_i+0x1e8>
 80031aa:	e7eb      	b.n	8003184 <_printf_i+0x1dc>
 80031ac:	2500      	movs	r5, #0
 80031ae:	f104 0919 	add.w	r9, r4, #25
 80031b2:	e7f5      	b.n	80031a0 <_printf_i+0x1f8>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ac      	bne.n	8003112 <_printf_i+0x16a>
 80031b8:	7803      	ldrb	r3, [r0, #0]
 80031ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c2:	e76c      	b.n	800309e <_printf_i+0xf6>
 80031c4:	08003459 	.word	0x08003459
 80031c8:	0800346a 	.word	0x0800346a

080031cc <memchr>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	b2c9      	uxtb	r1, r1
 80031d0:	4402      	add	r2, r0
 80031d2:	4290      	cmp	r0, r2
 80031d4:	4603      	mov	r3, r0
 80031d6:	d101      	bne.n	80031dc <memchr+0x10>
 80031d8:	2300      	movs	r3, #0
 80031da:	e003      	b.n	80031e4 <memchr+0x18>
 80031dc:	781c      	ldrb	r4, [r3, #0]
 80031de:	3001      	adds	r0, #1
 80031e0:	428c      	cmp	r4, r1
 80031e2:	d1f6      	bne.n	80031d2 <memchr+0x6>
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd10      	pop	{r4, pc}

080031e8 <memcpy>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	1e43      	subs	r3, r0, #1
 80031ec:	440a      	add	r2, r1
 80031ee:	4291      	cmp	r1, r2
 80031f0:	d100      	bne.n	80031f4 <memcpy+0xc>
 80031f2:	bd10      	pop	{r4, pc}
 80031f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031fc:	e7f7      	b.n	80031ee <memcpy+0x6>

080031fe <memmove>:
 80031fe:	4288      	cmp	r0, r1
 8003200:	b510      	push	{r4, lr}
 8003202:	eb01 0302 	add.w	r3, r1, r2
 8003206:	d807      	bhi.n	8003218 <memmove+0x1a>
 8003208:	1e42      	subs	r2, r0, #1
 800320a:	4299      	cmp	r1, r3
 800320c:	d00a      	beq.n	8003224 <memmove+0x26>
 800320e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003212:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003216:	e7f8      	b.n	800320a <memmove+0xc>
 8003218:	4283      	cmp	r3, r0
 800321a:	d9f5      	bls.n	8003208 <memmove+0xa>
 800321c:	1881      	adds	r1, r0, r2
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	42d3      	cmn	r3, r2
 8003222:	d100      	bne.n	8003226 <memmove+0x28>
 8003224:	bd10      	pop	{r4, pc}
 8003226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800322a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800322e:	e7f7      	b.n	8003220 <memmove+0x22>

08003230 <_free_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	4605      	mov	r5, r0
 8003234:	2900      	cmp	r1, #0
 8003236:	d043      	beq.n	80032c0 <_free_r+0x90>
 8003238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800323c:	1f0c      	subs	r4, r1, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	bfb8      	it	lt
 8003242:	18e4      	addlt	r4, r4, r3
 8003244:	f000 f8d0 	bl	80033e8 <__malloc_lock>
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <_free_r+0x94>)
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	4610      	mov	r0, r2
 800324e:	b933      	cbnz	r3, 800325e <_free_r+0x2e>
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	6014      	str	r4, [r2, #0]
 8003254:	4628      	mov	r0, r5
 8003256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800325a:	f000 b8c6 	b.w	80033ea <__malloc_unlock>
 800325e:	42a3      	cmp	r3, r4
 8003260:	d90b      	bls.n	800327a <_free_r+0x4a>
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	1862      	adds	r2, r4, r1
 8003266:	4293      	cmp	r3, r2
 8003268:	bf01      	itttt	eq
 800326a:	681a      	ldreq	r2, [r3, #0]
 800326c:	685b      	ldreq	r3, [r3, #4]
 800326e:	1852      	addeq	r2, r2, r1
 8003270:	6022      	streq	r2, [r4, #0]
 8003272:	6063      	str	r3, [r4, #4]
 8003274:	6004      	str	r4, [r0, #0]
 8003276:	e7ed      	b.n	8003254 <_free_r+0x24>
 8003278:	4613      	mov	r3, r2
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	b10a      	cbz	r2, 8003282 <_free_r+0x52>
 800327e:	42a2      	cmp	r2, r4
 8003280:	d9fa      	bls.n	8003278 <_free_r+0x48>
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	1858      	adds	r0, r3, r1
 8003286:	42a0      	cmp	r0, r4
 8003288:	d10b      	bne.n	80032a2 <_free_r+0x72>
 800328a:	6820      	ldr	r0, [r4, #0]
 800328c:	4401      	add	r1, r0
 800328e:	1858      	adds	r0, r3, r1
 8003290:	4282      	cmp	r2, r0
 8003292:	6019      	str	r1, [r3, #0]
 8003294:	d1de      	bne.n	8003254 <_free_r+0x24>
 8003296:	6810      	ldr	r0, [r2, #0]
 8003298:	6852      	ldr	r2, [r2, #4]
 800329a:	4401      	add	r1, r0
 800329c:	6019      	str	r1, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	e7d8      	b.n	8003254 <_free_r+0x24>
 80032a2:	d902      	bls.n	80032aa <_free_r+0x7a>
 80032a4:	230c      	movs	r3, #12
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	e7d4      	b.n	8003254 <_free_r+0x24>
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	1821      	adds	r1, r4, r0
 80032ae:	428a      	cmp	r2, r1
 80032b0:	bf01      	itttt	eq
 80032b2:	6811      	ldreq	r1, [r2, #0]
 80032b4:	6852      	ldreq	r2, [r2, #4]
 80032b6:	1809      	addeq	r1, r1, r0
 80032b8:	6021      	streq	r1, [r4, #0]
 80032ba:	6062      	str	r2, [r4, #4]
 80032bc:	605c      	str	r4, [r3, #4]
 80032be:	e7c9      	b.n	8003254 <_free_r+0x24>
 80032c0:	bd38      	pop	{r3, r4, r5, pc}
 80032c2:	bf00      	nop
 80032c4:	200000bc 	.word	0x200000bc

080032c8 <_malloc_r>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	1ccd      	adds	r5, r1, #3
 80032cc:	f025 0503 	bic.w	r5, r5, #3
 80032d0:	3508      	adds	r5, #8
 80032d2:	2d0c      	cmp	r5, #12
 80032d4:	bf38      	it	cc
 80032d6:	250c      	movcc	r5, #12
 80032d8:	2d00      	cmp	r5, #0
 80032da:	4606      	mov	r6, r0
 80032dc:	db01      	blt.n	80032e2 <_malloc_r+0x1a>
 80032de:	42a9      	cmp	r1, r5
 80032e0:	d903      	bls.n	80032ea <_malloc_r+0x22>
 80032e2:	230c      	movs	r3, #12
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	2000      	movs	r0, #0
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	f000 f87d 	bl	80033e8 <__malloc_lock>
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <_malloc_r+0xac>)
 80032f0:	6814      	ldr	r4, [r2, #0]
 80032f2:	4621      	mov	r1, r4
 80032f4:	b991      	cbnz	r1, 800331c <_malloc_r+0x54>
 80032f6:	4c20      	ldr	r4, [pc, #128]	; (8003378 <_malloc_r+0xb0>)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	b91b      	cbnz	r3, 8003304 <_malloc_r+0x3c>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f863 	bl	80033c8 <_sbrk_r>
 8003302:	6020      	str	r0, [r4, #0]
 8003304:	4629      	mov	r1, r5
 8003306:	4630      	mov	r0, r6
 8003308:	f000 f85e 	bl	80033c8 <_sbrk_r>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d124      	bne.n	800335a <_malloc_r+0x92>
 8003310:	230c      	movs	r3, #12
 8003312:	4630      	mov	r0, r6
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	f000 f868 	bl	80033ea <__malloc_unlock>
 800331a:	e7e4      	b.n	80032e6 <_malloc_r+0x1e>
 800331c:	680b      	ldr	r3, [r1, #0]
 800331e:	1b5b      	subs	r3, r3, r5
 8003320:	d418      	bmi.n	8003354 <_malloc_r+0x8c>
 8003322:	2b0b      	cmp	r3, #11
 8003324:	d90f      	bls.n	8003346 <_malloc_r+0x7e>
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	18cc      	adds	r4, r1, r3
 800332a:	50cd      	str	r5, [r1, r3]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f85c 	bl	80033ea <__malloc_unlock>
 8003332:	f104 000b 	add.w	r0, r4, #11
 8003336:	1d23      	adds	r3, r4, #4
 8003338:	f020 0007 	bic.w	r0, r0, #7
 800333c:	1ac3      	subs	r3, r0, r3
 800333e:	d0d3      	beq.n	80032e8 <_malloc_r+0x20>
 8003340:	425a      	negs	r2, r3
 8003342:	50e2      	str	r2, [r4, r3]
 8003344:	e7d0      	b.n	80032e8 <_malloc_r+0x20>
 8003346:	684b      	ldr	r3, [r1, #4]
 8003348:	428c      	cmp	r4, r1
 800334a:	bf16      	itet	ne
 800334c:	6063      	strne	r3, [r4, #4]
 800334e:	6013      	streq	r3, [r2, #0]
 8003350:	460c      	movne	r4, r1
 8003352:	e7eb      	b.n	800332c <_malloc_r+0x64>
 8003354:	460c      	mov	r4, r1
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	e7cc      	b.n	80032f4 <_malloc_r+0x2c>
 800335a:	1cc4      	adds	r4, r0, #3
 800335c:	f024 0403 	bic.w	r4, r4, #3
 8003360:	42a0      	cmp	r0, r4
 8003362:	d005      	beq.n	8003370 <_malloc_r+0xa8>
 8003364:	1a21      	subs	r1, r4, r0
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f82e 	bl	80033c8 <_sbrk_r>
 800336c:	3001      	adds	r0, #1
 800336e:	d0cf      	beq.n	8003310 <_malloc_r+0x48>
 8003370:	6025      	str	r5, [r4, #0]
 8003372:	e7db      	b.n	800332c <_malloc_r+0x64>
 8003374:	200000bc 	.word	0x200000bc
 8003378:	200000c0 	.word	0x200000c0

0800337c <_realloc_r>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	4607      	mov	r7, r0
 8003380:	4614      	mov	r4, r2
 8003382:	460e      	mov	r6, r1
 8003384:	b921      	cbnz	r1, 8003390 <_realloc_r+0x14>
 8003386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800338a:	4611      	mov	r1, r2
 800338c:	f7ff bf9c 	b.w	80032c8 <_malloc_r>
 8003390:	b922      	cbnz	r2, 800339c <_realloc_r+0x20>
 8003392:	f7ff ff4d 	bl	8003230 <_free_r>
 8003396:	4625      	mov	r5, r4
 8003398:	4628      	mov	r0, r5
 800339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339c:	f000 f826 	bl	80033ec <_malloc_usable_size_r>
 80033a0:	42a0      	cmp	r0, r4
 80033a2:	d20f      	bcs.n	80033c4 <_realloc_r+0x48>
 80033a4:	4621      	mov	r1, r4
 80033a6:	4638      	mov	r0, r7
 80033a8:	f7ff ff8e 	bl	80032c8 <_malloc_r>
 80033ac:	4605      	mov	r5, r0
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d0f2      	beq.n	8003398 <_realloc_r+0x1c>
 80033b2:	4631      	mov	r1, r6
 80033b4:	4622      	mov	r2, r4
 80033b6:	f7ff ff17 	bl	80031e8 <memcpy>
 80033ba:	4631      	mov	r1, r6
 80033bc:	4638      	mov	r0, r7
 80033be:	f7ff ff37 	bl	8003230 <_free_r>
 80033c2:	e7e9      	b.n	8003398 <_realloc_r+0x1c>
 80033c4:	4635      	mov	r5, r6
 80033c6:	e7e7      	b.n	8003398 <_realloc_r+0x1c>

080033c8 <_sbrk_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	2300      	movs	r3, #0
 80033cc:	4c05      	ldr	r4, [pc, #20]	; (80033e4 <_sbrk_r+0x1c>)
 80033ce:	4605      	mov	r5, r0
 80033d0:	4608      	mov	r0, r1
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	f7fd fa70 	bl	80008b8 <_sbrk>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d102      	bne.n	80033e2 <_sbrk_r+0x1a>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	b103      	cbz	r3, 80033e2 <_sbrk_r+0x1a>
 80033e0:	602b      	str	r3, [r5, #0]
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	200001c8 	.word	0x200001c8

080033e8 <__malloc_lock>:
 80033e8:	4770      	bx	lr

080033ea <__malloc_unlock>:
 80033ea:	4770      	bx	lr

080033ec <_malloc_usable_size_r>:
 80033ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f0:	1f18      	subs	r0, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbc      	itt	lt
 80033f6:	580b      	ldrlt	r3, [r1, r0]
 80033f8:	18c0      	addlt	r0, r0, r3
 80033fa:	4770      	bx	lr

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
